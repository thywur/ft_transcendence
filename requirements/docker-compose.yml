networks:
  peas:
    name: peas
  chat:
    name: chat
    internal: true
  auth:
    name: auth
    internal: true
  matchmaking:
    name: matchmaking
    internal: true
  ai_game:
    name: ai_game
    internal: true
  game:
    name: game
    internal: true

services:
  nginx:
    build: ./nginx
    ports:
      - "8443:8443"
    networks:
      - peas
    depends_on:
      - chat
      - auth
      - matchmaking

  chat:
    build: ./chat
    env_file:
      - ./conf/.env-chat
    ports:
      - "8000:8000"
    networks:
      - chat
      - peas
    depends_on:
      chat-db:
        condition: service_healthy
    environment:
      - REDIS_HOST=chat-redis
      - REDIS_PORT=6379

  chat-redis:
    container_name: chat-redis
    image: redis:6
    networks:
      - chat
    volumes:
      - chat-redis-volume:/data
    command:
      redis-server --save 60 1 --loglevel warning

  chat-db:
    image: postgres:14
    restart: on-failure
    volumes:
      - chat-db-volume:/var/lib/postgresql/data
    env_file:
      - ./conf/.env-chat
    networks:
      - chat
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 5

  auth:
    build: ./auth
    env_file:
      - ./conf/.env-auth
    ports:
      - "8001:8001"
    networks:
      - peas
      - auth
    depends_on:
      auth-db:
        condition: service_healthy

  auth-db:
    image: postgres:14
    restart: on-failure
    volumes:
      - auth-db-volume:/var/lib/postgresql/data
    env_file:
      - ./conf/.env-auth
    networks:
      - auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 5


  matchmaking:
    build: ./matchmaking
    env_file:
      - ./conf/.env-matchmaking
    networks:
      - peas
      - matchmaking
    ports:
      - "8002:8002"
    depends_on:
      chat-db:
        condition: service_healthy
    environment:
      - REDIS_HOST=matchmaking-redis
      - REDIS_PORT=6379

  matchmaking-db:
    image: postgres:14
    restart: on-failure
    volumes:
      - matchmaking-db-volume:/var/lib/postgresql/data
    env_file:
      - ./conf/.env-matchmaking
    networks:
      - peas
      - matchmaking
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 5

  matchmaking-redis:
    container_name: matchmaking-redis
    image: redis:6
    networks:
      - matchmaking
    volumes:
      - matchmaking-redis-volume:/data
    command:
      redis-server --save 60 1 --loglevel warning


  ai_game:
    container_name: ai_game
    build: 
      context: ./ai_game
      dockerfile: Dockerfile
    networks:
      - peas
      - ai_game
    volumes:
      - ./ai_game/app:/app/
    ports:
      - "8003:8003"
    environment:
      - REDIS_HOST=ai_game-redis
      - REDIS_PORT=6379

  ai_game_redis:
    container_name: ai_game_redis
    image: redis:6
    networks:
      - ai_game
    volumes:
      - ai_game-redis-volume:/data
    command:
      redis-server --save 60 1 --loglevel warning

  game:
    container_name: game
    build: 
      context: ./game
      dockerfile: Dockerfile
    networks:
      - peas
      - game
    volumes:
      - ./game/app:/app/
    ports:
      - "8004:8004"
    environment:
      - REDIS_HOST=game-redis
      - REDIS_PORT=6379

  game-redis:
    container_name: game-redis
    image: redis:6
    networks:
      - game
    volumes:
      - game-redis-volume:/data
    command:
      redis-server --save 60 1 --loglevel warning

volumes:
  chat-db-volume: {}
  auth-db-volume: {}
  game-db-volume: {}
  matchmaking-db-volume: {}
  chat-redis-volume: {}
  game-redis-volume: {}
  matchmaking-redis-volume: {}
  ai_game-redis-volume: {}